import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import numpy as np
from spicelib.sim.sim_runner import SimRunner
from spicelib.simulators.ngspice_simulator import NGspiceSimulator
from spicelib.editor.spice_editor import SpiceEditor
from spicelib.raw.raw_read import RawRead
from utils.plotter import Plotter

# Output directory
outdir = "./rc_sweep_output"
os.makedirs(outdir, exist_ok=True)

# Netlist path
netlist_path = os.path.join(outdir, "rc_filter.cir")

# Write SPICE netlist
with open(netlist_path, 'w') as f:
    f.write("* RC Low-Pass Filter\n")
    f.write(".option rawfmt=ps\n")  # Ensure binary raw output
    f.write("Vin in 0 AC 1\n")
    f.write("R1 in out 200\n")
    f.write("C1 out 0 1u\n")
    f.write(".ac dec 100 10 10Meg\n")
    f.write(".save V(out)\n")
    f.write(".end\n")

# Load and prepare the netlist
netlist = SpiceEditor(netlist_path)

# Create NGSpice simulator instance
simulator = NGspiceSimulator.create_from("ngspice.exe")  # Update this path
runner = SimRunner(output_folder=outdir, simulator=simulator)

# Run the simulation
runner.run(netlist)
runner.wait_completion()

# Confirm output files
print("Files in output directory:")
for file in os.listdir(outdir):
    print("-", file)

# Load .raw file generated by NGSpice
raw_path = os.path.join(outdir, "rc_filter_1.raw")
raw = RawRead(raw_path)

# Show what signals are available
print("Available traces:", raw.get_trace_names())

# Extract and process the data
freq = raw.get_trace("frequency")
vout_complex = raw.get_trace("v(out)")
vout_mag = np.abs(vout_complex)
vout_mag = np.clip(vout_mag, 1e-20, None)
vout_db = 20 * np.log10(vout_mag)

# Plot the frequency response
plot = Plotter()
plot.set([vout_db], freq, labels=["|V(out)| [dB]"])
plot.create(x_range=(0.00001, 10000), y_range=(-60, 5), log_x=True)
